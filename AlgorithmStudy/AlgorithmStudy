diff --git a/AlgorithmStudy/.classpath b/AlgorithmStudy/.classpath
new file mode 100644
index 0000000..63b7e89
--- /dev/null
+++ b/AlgorithmStudy/.classpath
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff --git a/AlgorithmStudy/.project b/AlgorithmStudy/.project
new file mode 100644
index 0000000..3aeac7c
--- /dev/null
+++ b/AlgorithmStudy/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>AlgorithmStudy</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/AlgorithmStudy/.settings/org.eclipse.jdt.core.prefs b/AlgorithmStudy/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..bb35fa0
--- /dev/null
+++ b/AlgorithmStudy/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.8
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.8
diff --git a/AlgorithmStudy/bin/Algorithm_456_132Pattern.class b/AlgorithmStudy/bin/Algorithm_456_132Pattern.class
new file mode 100644
index 0000000..8a62738
--- /dev/null
+++ b/AlgorithmStudy/bin/Algorithm_456_132Pattern.class
Binary files differ
diff --git a/AlgorithmStudy/src/Algorithm_456_132Pattern.java b/AlgorithmStudy/src/Algorithm_456_132Pattern.java
new file mode 100644
index 0000000..5f2f2f8
--- /dev/null
+++ b/AlgorithmStudy/src/Algorithm_456_132Pattern.java
@@ -0,0 +1,52 @@
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class Algorithm_456_132Pattern {
+	
+	public static void main(String[] args) {
+		Integer[] array = {-2, 3, 2, 0, -1};
+		_132Pattern(array);
+	}
+	
+	public static void _132Pattern(Integer[] array) {
+		if(array == null || array.length < 3) {
+			System.out.println("Input: " + array);
+			System.out.println("Output: False");
+			System.out.println("Explanation: There is no 132 pattern in the sequence.");
+			return;
+		}
+		List<String> explanations = new ArrayList<String>();
+		List<Integer> list = Arrays.asList(array);
+		int size = list.size();
+		list.forEach(integer1 -> {
+			int indexOf = list.indexOf(integer1);
+			for (int i = indexOf + 1; i < size; i++) {
+				Integer integer2 = list.get(i);
+				
+				for(int j = 1; i != size - j && size - j > 0; j ++) {
+					Integer integer3 = list.get(size - j);
+					
+					if(integer1 < integer3 && integer2 > integer3) {
+						Integer[] explanation = {integer1, integer3, integer2};
+						explanations.add(Arrays.asList(explanation).toString());
+					}
+				}
+			}
+		});
+		if(explanations.size() == 0) {
+			System.out.println("Input: " + list.toString());
+			System.out.println("Output: False");
+			System.out.println("Explanation: There is no 132 pattern in the sequence.");
+		} else {
+			System.out.println("Input: " + list.toString());
+			System.out.println("Output: True");
+			StringBuffer sb = new StringBuffer();
+			for (String str : explanations) {
+				sb.append(str + ",");
+			}
+			sb.setLength(sb.length() - 1);
+			System.out.println("Explanation: There is a 132 pattern in the sequence: " + sb.toString() +".");
+		}
+	}
+}
